(define prime-go-left-edge-key '("<IgnoreCase><Control>a" "<Control>left"))
(define prime-go-left-edge-key? (make-key-predicate '("<IgnoreCase><Control>a" "<Control>left")))
(define prime-go-right-edge-key '("<IgnoreCase><Control>e" "<Control>right"))
(define prime-go-right-edge-key? (make-key-predicate '("<IgnoreCase><Control>e" "<Control>right")))
(define prime-backspace-key '(generic-backspace-key))
(define prime-backspace-key? (make-key-predicate '(generic-backspace-key?)))
(define prime-delete-key '(generic-delete-key))
(define prime-delete-key? (make-key-predicate '(generic-delete-key?)))
(define prime-go-left-key '(generic-go-left-key))
(define prime-go-left-key? (make-key-predicate '(generic-go-left-key?)))
(define prime-go-right-key '(generic-go-right-key))
(define prime-go-right-key? (make-key-predicate '(generic-go-right-key?)))
(define prime-shrink-segment-key '("<IgnoreCase><Control>i" "<Shift>left"))
(define prime-shrink-segment-key? (make-key-predicate '("<IgnoreCase><Control>i" "<Shift>left")))
(define prime-expand-segment-key '("<IgnoreCase><Control>o" "<Shift>right"))
(define prime-expand-segment-key? (make-key-predicate '("<IgnoreCase><Control>o" "<Shift>right")))
(define prime-english-next-candidate-key '("<IgnoreCase><Control>i" "tab" generic-next-candidate-key))
(define prime-english-next-candidate-key? (make-key-predicate '("<IgnoreCase><Control>i" "tab" generic-next-candidate-key?)))
(define prime-english-direct-key '("." "," ":" ";" "(" ")" "\"" "'" "!" "?"))
(define prime-english-direct-key? (make-key-predicate '("." "," ":" ";" "(" ")" "\"" "'" "!" "?")))
